{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Astro Pi Orbit","text":"<p>The <code>astro_pi_orbit</code> library provides functionality to assist Astro Pi Mission Space Lab participants in working with orbital data. Functions are provided to do the following:</p> <ul> <li>Find the ISS's current location.</li> <li>Load and view the standard <code>de421.bsp</code> and <code>de440.bsp</code> ephemeris files, which contain the precise positions of the planets and other celestial bodies.</li> <li>Load the ISS's latest trajectory.</li> </ul> <p>The <code>astro_pi_orbit</code> library is useful for participants of all levels of experience: new participants can use <code>astro_pi_orbit</code> to get the ISS coordinates, which is helpful for things like geotagging pictures. For more advanced uses, the library unlocks access to several ephemeris and two-line element files (that describe the position of the celestial bodies and the ISS) that can be used to perform more complex astronomical calculations and analyses. These files are normally too big to include in Mission Space Lab submissions, but the library makes them readily available.</p>"},{"location":"#installation","title":"Installation","text":"<p>The installation steps differ depending on your operating system.</p>"},{"location":"#raspberry-pi-os","title":"Raspberry Pi OS","text":"<p>You can install <code>astro_pi_orbit</code> using <code>pip</code>. From Raspberry Pi OS Bookworm onwards, you need to install external Python dependencies into a 'virtual environment' that you create on a per project basis. This 'virtual environment' (<code>venv</code> for short) prevents you inadvertantly overwriting the Python dependencies needed by the operating system when you install third party libraries, such as <code>astro_pi_orbit</code>.</p> <p>To install the <code>astro_pi_orbit</code> library into a <code>venv</code> called <code>astro_pi_orbit-venv</code>, follow the steps below:</p> <ol> <li> <p>Open a terminal window on your Raspberry Pi.</p> <p></p> </li> <li> <p><code>curl -L --fail https://astro-pi.github.io/astro-pi-orbit/install.sh | bash</code></p> </li> </ol>"},{"location":"#other-operating-systems","title":"Other operating systems","text":"<p>Install <code>astro_pi_orbit</code> using <code>pip</code>:</p> <ol> <li><code>pip install astro_pi_orbit</code></li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>For common uses (recipes), see the recipes page. Otherwise, for extensive API documentation, head to the API page.</p>"},{"location":"#credits","title":"Credits","text":"<ul> <li>Brandon Rhodes, the writer of the Python Skyfield library which is wrapped by <code>astro_pi_orbit</code>.</li> </ul>"},{"location":"api/","title":"API","text":""},{"location":"api/#how-to-read-api-docs","title":"How to read API docs","text":"<p>API docs or \"Application Programming Interface Documentation\" is a fancy name for a list of all the things a piece of software can do, and how to use them.</p> <p>The docs list all of the methods and attributes available in <code>astro_pi_orbit</code>.</p> <p>You will see a block of code like this:</p> <pre><code>coordinates() -&gt; str\n</code></pre> <p>This tells you:</p> <ul> <li>there is a function called <code>coordinates</code></li> <li>the function has no arguments (blank parentheses)</li> <li>the type the function returns (<code>-&gt; str</code>)</li> </ul> <p>You may also see a block of code like this: <pre><code>de421: skyfield.jpllib.SpiceKernel\n</code></pre></p> <p>This tells you:  - there is an attribute called <code>de421</code> that is of type <code>skyfield.pkllib.SpiceKernel</code>.</p>"},{"location":"api/#api-docs","title":"API docs","text":"<p>The <code>astro_pi_orbit</code> library exports four names: <code>ISS</code>, <code>de421</code>, <code>de440s</code>, and <code>ephemeries</code>.</p>"},{"location":"api/#iss","title":"ISS","text":"<p>A function that returns a <code>Skyfield</code> <code>EarthSatellite</code> object with an additional <code>coordinates</code> method, produced by reading the latest two-line element set file available on the operating system.</p> <p>More information on the <code>Skyfield</code> objects returned and used can be found here and here.</p> <pre><code>ISS() -&gt; skyfield.sgp4lib.EarthSatellite\n</code></pre>"},{"location":"api/#example","title":"Example","text":"<p>The code below reads the latest TLE data into the <code>iss</code> variable, and prints the <code>iss</code> variable to the console: <pre><code>from astro_pi_orbit import ISS\niss = ISS()\nprint(iss)\n</code></pre></p> <p>When executed, this code outputs the following: <pre><code>&lt;EarthSatellite ISS (ZARYA) catalog #25544 epoch 2024-03-12 05:03:40 UTC&gt;\n</code></pre></p>"},{"location":"api/#coordinates","title":"coordinates","text":"<ul> <li>Gets the current coordinates of the ISS.</li> <li>Returns a <code>skyfield.toposlib.GeographicPosition</code>. <pre><code>coordinates() -&gt; &lt;class 'skyfield.toposlib.GeographicPosition'&gt;\n</code></pre></li> </ul>"},{"location":"api/#example_1","title":"Example","text":"<p>This function can be used to geotag photos using <code>picamzero</code>.</p> <pre><code>from picamzero import Camera\nfrom astro_pi_orbit import ISS\n\niss = ISS()\ncamera = Camera()\n\ndef take_photo(image_name):\n    \"\"\"\n    Takes a photo and embeds the current coordinates of the ISS\n    into the metadata.\n    \"\"\"\n    point = iss.coordinates()\n    coordinates = (point.latitude.signed_dms(), point.longitude.signed_dms())\n    cam.take_photo(image_name, gps_coordinates=get_gps_coordinates(iss))\n\ntake_photo(\"tagged-img.jpg\")\n</code></pre> <p>This will take a photo called <code>tagged-img.jpg</code>, and embed the ISS coordinates into the image metadata.</p>"},{"location":"api/#de421","title":"de421","text":"<ul> <li>Access the standard <code>de421.bsp</code> ephemeris file data via the <code>skyfield.jpllib.SpiceKernel</code> interface. For more information on how this is used, see here</li> </ul> <pre><code>de421: skyfield.jpllib.SpiceKernel\n</code></pre>"},{"location":"api/#example_2","title":"Example","text":"<p>This code gets the current position of Mars and prints it to the console: <pre><code>from astro_pi_orbit import de421\nfrom skyfield.api import load\n\nts = load.timescale()\nprint(de421['Mars Barycenter'].at(ts.now()))\n</code></pre></p>"},{"location":"api/#de440s","title":"de440s","text":"<ul> <li>Access the standard <code>de440s.bsp</code> ephemeris file data via the <code>skyfield.jpllib.SpiceKernel</code> interface. For more information on how this is used, see here</li> </ul>"},{"location":"api/#example_3","title":"Example","text":"<p>This code gets the current position of Earth and prints it to the console:</p> <pre><code>from astro_pi_orbit import de440s\nfrom skyfield.api import load\n\nts = load.timescale()\nprint(de421['earth'].at(ts.now()))\n</code></pre>"},{"location":"api/#ephemeris","title":"ephemeris","text":"<p>A synonym for the <code>de421</code> attribute described above.</p>"},{"location":"recipes/","title":"Recipes","text":"<p>This page contains a few common recipes using the functions provided by <code>astro_pi_oribit</code>.</p>"},{"location":"recipes/#get-the-current-coordinates-of-the-iss","title":"Get the current coordinates of the ISS","text":"<pre><code>from astro_pi_orbit import ISS\n\niss = ISS()\nprint(ISS.coordinates())\n</code></pre>"},{"location":"recipes/#take-a-photo-and-embed-it-with-the-current-iss-coordinates","title":"Take a photo and embed it with the current ISS coordinates","text":"<pre><code>from picamzero import Camera\nfrom astro_pi_orbit import ISS\n\niss = ISS()\ncamera = Camera()\n\ndef take_photo(image_name):\n    \"\"\"\n    Takes a photo and embeds the current coordinates of the ISS\n    into the metadata.\n    \"\"\"\n    point = iss.coordinates()\n    coordinates = (point.latitude.signed_dms(), point.longitude.signed_dms())\n    cam.take_photo(image_name, gps_coordinates=get_gps_coordinates(iss))\n\ntake_photo(\"tagged-img.jpg\")\n</code></pre>"},{"location":"recipes/#read-the-iss-trajectory-from-the-latest-two-line-element-file","title":"Read the ISS trajectory from the latest two-line-element file","text":"<pre><code>from astro_pi_orbit import ISS\niss = ISS()\n</code></pre>"},{"location":"recipes/#get-the-coordinate-of-the-iss-at-a-specific-time","title":"Get the coordinate of the ISS at a specific time","text":"<pre><code>from astro_pi_orbit import ISS\nfrom skyfield.api import load\niss = ISS()\nts = load.timescale()\ncoordinates = iss.at(ts.utc(2021, 12, 2, 14, 7))\nprint(coordinates)\n</code></pre>"},{"location":"recipes/#get-the-position-of-a-planet-or-the-earth","title":"Get the position of a planet or the Earth","text":"<pre><code>from astro_pi_orbit import de421\nearth = de421['earth']\nmars = de421['Mars Barycenter']\nprint(earth, mars)\n</code></pre>"}]}